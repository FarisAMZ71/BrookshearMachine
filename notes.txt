Steps to create new button:
1- Create button js element
2- import and add button in parent element, and define the onclick function
3- create handle() function
4- add function to component args
5- bind button in constructor

LDR R0, 10
LDR R1, 20
ADT R2, R0, R1
STR R2, 11
LEA R3, 11
HLT

Sum of [1, 10]
LDR R1, 00 // int i = 0
LDR R0, 0A // i != 10
LDR R2, 01 // i++
LDR R3, 00 // Sum result
JMP R1, 10 // Exit loop
ADT R3, R1, R3 // R3 + i
ADT R1, R1, R2 // increment i
JMP R0, 08 //loop
HLT

LDR 0, 10
PSH 0, 00
PSH 0, 00
PSH 0, 00
PSH 0, 00
POP 1, 00
POP 1, 00
POP 1, 00
POP 1, 00
HLT 0, 00

START:
  LDR 1, 10
  LDR 2, 20
  CAL FUNC_ADD
  HLT 
FUNC_ADD:
  ADT 3, 12
  POP PC
  
add  save and load
live machine_code generation

what command could be in the assembler 
which can be assembled into more than one brookshear instructin eg sub, mul

maximum expadibality usin minimum instruction
branch, branch and return, stack, linking

add colors from machine codde to memory
look at assembly books first chapters

look at color coding(accessability + consistancy)
make mobile friendly

instruction extending (if 1111 then subset of instructions)
standards for function calls in assembly

link registers + stacks
paging
instruction extending

push multiple registers in one instruction

(branch and link+ exchange)
run speed 
save program after closure

Good quality instruction
- urself
2-project
3- psentation
seedingquestion

merge sdort - stack
encryption - branch

justify additional modes


// Brookshear assembly translation of the 16-bit words

//LOAD VALUES INTO MEMORY
LDR R0, 07
STR R0, F0
LDR R0, 06
STR R0, F1
LDR R0, 05
STR R0, F2
LDR R0, 04
STR R0, F3
LDR R0, 03
STR R0, F4
LDR R0, 02
STR R0, F5
LDR R0, 01
STR R0, F6
LDR R0, 00
STR R0, F7

// BUBBLE SORT
LDR RF, F0        // 2FF0
LDR RE, F7        // 2EF7
LDR RD, FF        // 2DFF
LDR RC, 80        // 2C80
LDR RB, 01        // 2B01
LDR RA, 00        // 2A00
LDR R9, 00        // 2900
STR RF, 11        // 3F11
LEA R1, F7        // 11F7
ADT RF, RF, RB    // 5FFB
STR RF, 17        // 3F17
LEA R2, F8        // 12F8
XOR R0, R1, RD    // 901D
ADT R0, R0, RB    // 500B
ADT R0, R0, R2    // 5002
AND R0, R0, RC    // 800C
JMP RA, 30        // BA30
ADT RF, RF, RD    // 5FFD
STR RF, 27        // 3F27
STR R2, F0        // 32F0
ADT RF, RF, RB    // 5FFB
STR RF, 2D        // 3F2D
STR R1, F1        // 31F1
LDR R9, 01        // 2901
ADT R0, RF, RA    // 50FA
JMP RE, 36        // BE36
JMP R0, 0E        // B00E
ADT R0, R9, RA    // 509A
JMP RA, 42        // BA42
LDR RF, F0        // 2FF0
LDR R9, 00        // 2900
ADT RE, RE, RD    // 5EED
JMP R0, 0E        // B00E
HLT               // C000



