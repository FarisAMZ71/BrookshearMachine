// for comments
empty lines are removed
leading and trailing whitespace are removed
each line has only one operation


Command format:
{Command} {Target register}, {Bit pattern}

Commands (from brookshear):
1 LEA r, xy - load effective address
2 LDR r, xy - load register
3 STR r, xy - store to memory
4 MOV 0, xy - move value between registers
5 ADT r, xy - add 2's complement
6 ADF r, xy - add floating point
7 ORR r, xy - or
8 AND r, xy - and
9 XOR r, xy - xor
A ROT r, 0y - rotate
B JMP r, xy - jump
C HLT 0, 00 - halt
D PSH r, xy - push stack from r, xy elements
E POP r, xy - pop stack from r, xy elements (POP 0, 00 pops LR TO PC)
F CAL 0, xy - call function on address xy

Mode Branch memory map:
+----------------------+ 0x00
| Main program         | ← starts at address 0x00
|                      |
| ...                  |
| CALL functionX       | ← when executed, jumps to function code
| ...                  |
+----------------------+ <- function section (e.g., 0x80)
| Function: functionX  |
| ...                  |
| POP PC               |
+----------------------+ <- stack grows upwards from here (e.g., 0xF0)
| Stack(SP points here)|
+----------------------+ 0xFF



